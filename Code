`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 24.05.2023 22:00:04
// Design Name: 
// Module Name: ntapfilter
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module fir_3tap(x_in,clock,reset,y_out);
    parameter M=4;
    input [3:0] x_in;
    input clock;
    input reset;
    output [((M>>1) + 6):0] y_out;
    //wire [6:0] y_in;
    
    wire [3:0] ram [M-1:0];
    wire [6:0] y1 [M:0];
    
genvar i;   
generate 

for (i=0;i<M;i=i+1)begin
    assign ram[i] = 4'b0001;
    end
endgenerate
 
reg [3:0] x [M-1:0];
wire signed [6:0] y [M-1:0];
        
        always@(posedge clock) begin
     if (reset == 1) 
               x[0] <= 4'b0;
     else
        x[0] <= x_in;
     end
     
generate 
for (i=1;i<M;i=i+1)begin
     always@(posedge clock) begin
     if (reset == 1) 
               x[i] <= 4'b0;
      else
        x[i] <= x[i-1];
     end
    end
endgenerate
  

generate 
for (i=0;i<M;i=i+1)begin

   baugh_mult bw_inst1(ram[i],x[M-i-1],y[M-i-1]);
     end
 
endgenerate  

assign y1[0]=0;
generate 

for (i=0;i<M;i=i+1)
begin
      assign y1[i+1] = y1[i] + y[i];
end
 
 assign y_out = y1[M];    

endgenerate   

     
    
     
endmodule














////////////////
module baugh_mult(a, b, p);
input [3:0] a, b;
output [6:0] p;
supply1 one;
wire w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11,
w12, w13, w14, w15, w16, w17, w18, w19, w20, w21,
w22, w23, w24, w25;
assign p[0] = a[0]&b[0];
half_adder HA1(a[1]&b[0], a[0]&b[1], p[1], w1);
half_adder HA2(a[2]&b[0], a[1]&b[1], w2, w3);
half_adder HA3(~(a[3]&b[0]), a[2]&b[1], w4, w5);

full_adder FA1(w2, w1, a[0]&b[2], p[2],w6);
full_adder FA2(w4, w3, a[1]&b[2],w7, w8);
full_adder FA3(w5, a[2]&b[2], ~(a[3]&b[1]), w9,w10);
full_adder FA4(w6, w7, ~(a[0]&b[3]), p[3], w11);
full_adder FA5(w8, w9, ~(a[1]&b[3]), w12,w13);
full_adder FA6(w10, ~(a[2]&b[3]), ~(a[3]&b[2]), w14,w15);
full_adder FA7(one, w11, w12, p[4], w16);

half_adder HA4(w13, w14, w17, w18);
half_adder HA5(a[3]&b[3], w15, w19, w20);
half_adder HA6(w16,w17, p[5], w21);
half_adder HA7(w18, w19, w22,w23);
half_adder HA8(w21, w22,p[6], w24);
endmodule

module full_adder (x, y, cin,s,cout);
input x, y, cin;
output s, cout;
assign s = x^y^cin;
assign cout = (x&y)|(y&cin)|(x&cin);
endmodule

module half_adder (x, y, s, cout);
input x, y;
output s, cout;
assign s = x^y;
assign cout = x&y;
endmodule


/////////////////////////////////////////
module fir3tap_tb();

  
    parameter M=4;
    reg [3:0] x;
    reg clock;
    reg reset;
    wire [((M>>1) + 6):0] y;


always #5 clock <= ~clock;

fir_3tap DUT(x, clock, reset, y);

initial begin
clock = 1; reset = 1;
#10 reset = 0; x = 5'd1;
#10 x = 4'd2;
#10 x = 4'd3;
#10 x = 4'd4;
#10 x = 4'd5;
#10 x = 4'd6;
#10 x = 4'd7;
end

endmodule
